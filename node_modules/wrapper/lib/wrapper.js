/*jslint node: true */

'use strict';

var https = require('https');

/**
 * API wrapper.
 * @author Gabor Sar <gabor.sar@rightster.com>
 */
var wrapper = exports;

/**
 * Default options.
 * @type {Object}
 */
wrapper.options = {
    host: '',
    path: '',
    port: 443,
    username: null,
    password: null
};

/**
 * Sets options.
 * @param {Object} options
 */
wrapper.setOptions = function (options) {
    var key;
    for (key in options) {
        if (options.hasOwnProperty(key)) {
            this.options[key] = options[key];
        }
    }
};

/**
 * Sends a custom request to the API.
 * @param {String} method
 * @param {String} data
 * @param {String} path
 * @param {Function} callback
 */
wrapper.call = function (method, data, path, callback) {
    var options, req, response;

    // prepare options
    options = {
        host: this.options.host,
        path: this.options.path + path,
        port: this.options.port,
        method: method
    };

    // prepare authentications
    if (this.options.username || this.options.password) {
        options.auth = this.options.username + ':' + this.options.password;
    }

    // prepare and send request
    response = '';
    req = https.request(options, function (res) {
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            response += chunk;
        }).on('end', function () {
            callback(JSON.parse(response));
        });
    });
    if (data) {
        req.write(data);
    }
    req.end();
};

/**
 * Sends a GET request.
 * @param {String} path
 * @param {Function} callback
 */
wrapper.get = function (path, callback) {
    this.call('GET', null, path, callback);
};

/**
 * Sends a POST request.
 * @param {String} data
 * @param {String} path
 * @param {Function} callback
 */
wrapper.post = function (data, path, callback) {
    this.call('POST', data, path, callback);
};

/**
 * Sends a PUT request.
 * @param {String} data
 * @param {String} path
 * @param {Function} callback
 */
wrapper.put = function (data, path, callback) {
    this.call('PUT', data, path, callback);
};

/**
 * Sends a DELETE request.
 * @param {String} data
 * @param {String} path
 * @param {Function} callback
 */
wrapper.delete = function (data, path, callback) {
    this.call('DELETE', data, path, callback);
};
