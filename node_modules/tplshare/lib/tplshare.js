/*jslint node: true */

'use strict';

var path = require('path'),
    async = require('async'),
    fs = require('fs'),
    hogan = require('hogan.js');

/**
 * Template sharing module.
 * @author Gabor Sar <gabor.sar@rightster.com>
 */
var tplshare = exports;

/**
 * Basepath.
 * @type {String}
 */
tplshare.basepath = '';

/**
 * Tempalte file extension.
 * @type {satring}
 */
tplshare.extension = '';

/**
 * Sets (base)path.
 * @param {string} basepath
 * @return {tplshare} Support method chaining.
 */
tplshare.setPath = function (basepath) {
    this.basepath = path.normalize(basepath);
    return this;
};

/**
 * Sets extension.
 * @param {string} extension
 * @return {tplshare) Support method chaining.
 */
tplshare.setExtension = function (extension) {
    this.extension = extension ? '.' + extension : '';
    return this;
};

/**
 * Asynchronously reads the content of multiply files.
 * @param {Object} filenames
 * @param {Function} callback
 */
tplshare.get = function (filenames, callback) {
    var basepath = this.basepath,
        extension = this.extension;

    // read all files parallel
    async.parallel(Object.keys(filenames).map(function (key) {
        var filename = path.join(basepath, filenames[key]) + extension;
        return function (taskCallback) {
            fs.readFile(filename, 'utf8', function (err, data) {
                taskCallback(err, {
                    key: key,
                    content: hogan.compile(data, {
                        asString: true
                    })
                });
            });
        };
    }), callback);
};

